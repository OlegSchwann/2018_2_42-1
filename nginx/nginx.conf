user  nginx;
worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;
    client_max_body_size 10m;

    gzip  on;
    #  Allows sending precompressed files with the “.gz” filename extension instead of regular files.
    gzip_static on;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3
    ssl_prefer_server_ciphers on;

    server {
        listen [::]:443 ssl http2 ipv6only=on;
        listen 443 ssl http2;

        # https://letsencrypt.org/getting-started/#with-shell-access
        # https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx
        ssl_certificate /etc/letsencrypt/live/rpsarena.ru/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/rpsarena.ru/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # Return of static files.
        location / {
            expires 48h;
            root   /var/www/html;
            index  /index.html;
            # Return the single-page application root 'index.html' if the user came by generated URL.
            try_files $uri /index.html;
        }

        # Return user-uploaded files, such as avatars.
        location /media {
            expires 48h;
            root /var/www;
        }

        location /sw.js {
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
            proxy_no_cache 1;
        }

        # Proxy to api server.
        location /api/v1 {
            proxy_pass http://authorization:8080;
        }

        # Proxy to game server with SecureWebSocket headers.
        # https://stackoverflow.com/questions/12102110/nginx-to-reverse-proxy-websockets-and-enable-ssl-wss
        location /game/v1/entrypoint {
            proxy_pass http://game:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            # Do not allow the connection break by nginx
            proxy_connect_timeout     43200000;
            proxy_read_timeout        43200000;
            proxy_send_timeout        43200000;
        }
    }

    server {
        listen 80 ;
        listen [::]:80 ;

        return 301 https://$host$request_uri;
    }
}
